apply plugin: "groovy"
apply plugin: "idea"

repositories {
    jcenter()
}

sourceSets {
    functional
}
loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    setProperty 'environment', environment
    println "Environment is set to $environment"

    def configFile = file("gradle\\config\\config.groovy")
    def config = new ConfigSlurper(environment).parse(configFile.toURL())
    ext.config = config
}

// The drivers we want to use
ext.drivers = ["chrome", "ie", "firefox"]

dependencies {
    def gebVersion = "0.9.2"
    def seleniumVersion = "2.42.0"

    // If using Spock, need to depend on geb-spock
    functionalCompile "org.gebish:geb-spock:$gebVersion"
    functionalCompile "org.spockframework:spock-core:0.7-groovy-2.0"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    functionalCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    drivers.each { driver ->
        functionalCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver
        systemProperty "geb.build.baseUrl", new File(config.baseUrl).toURI()
        systemProperty "remote.test", hasProperty('remote') ? remote : false

        classpath = sourceSets.functional.runtimeClasspath
        testClassesDir = sourceSets.functional.output.classesDir

        testLogging {
            events 'started', 'passed'
        }
    }
}

task functionalTest {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}